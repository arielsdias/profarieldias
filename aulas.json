[
    {
        "trilha": "Trilha 1 – Fundamentos do Java",
        "modulo": "Módulo 1.1 – Introdução à Linguagem Java",
        "aula": "Aula 1 – O que é Java e como funciona?",
        "objetivo": "Compreender a origem, os princípios fundamentais e o funcionamento da linguagem Java, incluindo seu modelo de execução em múltiplas plataformas, arquitetura da Máquina Virtual Java (JVM), estrutura básica de um programa e os conceitos de compilação e bytecode.",
        "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
        "conteudo": "<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Conteúdo da Aula</h5>\n  <p><strong>Introdução ao Java:</strong>  Java é uma linguagem de programação de alto nível, orientada a objetos e multiplataforma, criada por James Gosling e sua equipe na Sun Microsystems em 1995. Desde então, tornou-se uma das linguagens mais utilizadas no mundo corporativo, em especial em sistemas bancários, aplicações web de grande porte, sistemas Android, dispositivos embarcados e soluções de backend robustas.</p>\n  <p><strong>Multiplataforma e o lema “Write Once, Run Anywhere”:</strong>  O grande diferencial do Java é sua portabilidade. Isso é possível porque, ao compilar um programa Java, não geramos código de máquina específico para o sistema operacional, mas sim um arquivo intermediário chamado <strong>bytecode</strong>. Esse bytecode é interpretado ou compilado just-in-time (JIT) pela <strong>JVM (Java Virtual Machine)</strong>, que é adaptada para cada sistema operacional. Ou seja, o mesmo código compilado pode ser executado em Windows, Linux, macOS, Android e outros, desde que a JVM esteja presente.</p>\n  <p><strong>Arquitetura do Java:</strong></p>\n  <ul>\n    <li><strong>Java Language:</strong> a linguagem em si (sintaxe, semântica e convenções de codificação).</li>\n    <li><strong>Java Compiler (javac):</strong> traduz o código-fonte (.java) para bytecode (.class).</li>\n    <li><strong>Java Virtual Machine (JVM):</strong> executa o bytecode, gerencia memória, threads, garbage collection e abstrai a máquina real.</li>\n    <li><strong>Java API (Application Programming Interface):</strong> biblioteca padrão rica com centenas de pacotes (java.util, java.io, java.net etc.)</li>\n  </ul>\n  <p><strong>Exemplo básico:</strong></p>\n  <pre><code>public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Olá, mundo!\");\n  }\n}</code></pre>\n  <p><strong>Explicando o código:</strong></p>\n  <ul>\n    <li><code>public class HelloWorld</code>: define uma classe pública chamada HelloWorld.</li>\n    <li><code>public static void main(String[] args)</code>: é o método principal. O ponto de entrada do programa.</li>\n    <li><code>System.out.println(...)</code>: imprime uma linha de texto no console.</li>\n  </ul>\n  <p>Esse código é salvo com o nome <code>HelloWorld.java</code>. Ao compilar com o comando <code>javac HelloWorld.java</code>, é gerado o arquivo <code>HelloWorld.class</code>. Para executar: <code>java HelloWorld</code>.</p>\n  <p><strong>JVM, JRE e JDK: o que são?</strong></p>\n  <ul>\n    <li><strong>JVM (Java Virtual Machine):</strong> executa os arquivos .class, traduzindo bytecode em código de máquina em tempo de execução.</li>\n    <li><strong>JRE (Java Runtime Environment):</strong> ambiente necessário para rodar programas Java. Contém a JVM + bibliotecas.</li>\n    <li><strong>JDK (Java Development Kit):</strong> pacote completo com compilador, depurador, bibliotecas e a JRE. Necessário para desenvolver aplicações.</li>\n  </ul>\n  <p><strong>Por que Java é amplamente usado?</strong></p>\n  <ul>\n    <li><strong>Portabilidade:</strong> executa em qualquer sistema com JVM.</li>\n    <li><strong>Orientação a Objetos:</strong> facilita a reutilização, manutenção e organização de código.</li>\n    <li><strong>Segurança:</strong> possui recursos nativos contra execução de código malicioso.</li>\n    <li><strong>Desempenho:</strong> com o uso de JIT, o Java tem desempenho muito próximo de linguagens compiladas diretamente como C++.</li>\n    <li><strong>Ampla comunidade e documentação:</strong> mais fácil de encontrar suporte e bibliotecas.</li>\n  </ul>\n  <p><strong>Fluxo de desenvolvimento em Java:</strong></p>\n  <ol>\n    <li>Escrevemos o código no arquivo <code>.java</code></li>\n    <li>Compilamos com <code>javac</code> para gerar bytecode (.class)</li>\n    <li>Executamos com <code>java</code>, que invoca a JVM para rodar o bytecode</li>\n  </ol>\n  <p><strong>Curiosidade:</strong>  Antes de Java, o desenvolvimento multiplataforma era quase impossível. Cada programa precisava ser reescrito para diferentes sistemas operacionais. A introdução da JVM mudou esse paradigma e foi uma revolução no desenvolvimento de software.</p>\n  <p><strong>Resumo:</strong>  Nesta aula você aprendeu o que é Java, sua história, como funciona a compilação e execução com bytecode, o papel da JVM, e como isso permite a portabilidade da linguagem. Também vimos a estrutura básica de um programa Java e os principais componentes da arquitetura Java: JDK, JRE e JVM.</p>\n  <p>Nos próximos encontros, vamos explorar a sintaxe da linguagem com mais profundidade e começar a interagir com o usuário, trabalhar com dados e construir programas cada vez mais inteligentes.</p>\n</div>"
    },
    {
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.1 – Introdução à Linguagem Java",
  "aula": "Aula 2 – Configurando seu ambiente Java",
  "objetivo": "Instalar e configurar corretamente o ambiente de desenvolvimento Java, incluindo JDK, IDE, variáveis de ambiente e execução básica via terminal.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "<div class='content-area p-4 border rounded'>\n  <h5 class='mb-3'>Conteúdo da Aula</h5>\n  <p>Nesta aula, vamos configurar o ambiente necessário para programar em Java. A linguagem Java exige a instalação de alguns componentes fundamentais antes de começarmos a codificar. Essa etapa inicial pode parecer técnica, mas é essencial para garantir que todos os recursos funcionem corretamente.</p>\n\n  <h6>1. Instalando o JDK (Java Development Kit)</h6>\n  <p>O JDK é o kit de desenvolvimento Java, responsável por fornecer o compilador (<code>javac</code>) e a máquina virtual Java (<code>java</code>), entre outras ferramentas.</p>\n  <ul>\n    <li>Acesse o site oficial da Oracle ou do <a href='https://adoptium.net/'>Adoptium (Temurin)</a>.</li>\n    <li>Baixe a versão mais recente do JDK (Java 17 LTS é uma ótima escolha para iniciantes).</li>\n    <li>Escolha o instalador compatível com seu sistema operacional (Windows, macOS ou Linux).</li>\n    <li>Siga o assistente de instalação e anote o caminho onde o JDK foi instalado (geralmente algo como <code>C:\\Program Files\\Java\\jdk-17</code>).</li>\n  </ul>\n\n  <h6>2. Configurando a variável de ambiente JAVA_HOME</h6>\n  <p>Essa variável informa ao sistema onde o JDK está instalado, permitindo que outras ferramentas o utilizem corretamente.</p>\n  <p><strong>No Windows:</strong></p>\n  <ol>\n    <li>Vá em Painel de Controle → Sistema → Configurações Avançadas do Sistema → Variáveis de Ambiente.</li>\n    <li>Crie uma nova variável do sistema chamada <code>JAVA_HOME</code> com o valor do caminho onde o JDK foi instalado.</li>\n    <li>Edite a variável <code>Path</code> e adicione o seguinte: <code>%JAVA_HOME%\\bin</code>.</li>\n  </ol>\n  <p><strong>No macOS/Linux:</strong></p>\n  <pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH</code></pre>\n  <p>Adicione essas linhas ao seu arquivo <code>.bashrc</code>, <code>.zshrc</code> ou <code>.bash_profile</code>, dependendo do terminal que estiver usando.</p>\n\n  <h6>3. Verificando a instalação</h6>\n  <p>Abra o terminal ou prompt de comando e digite:</p>\n  <pre><code>java -version\njavac -version</code></pre>\n  <p>Você deverá ver a versão do JDK instalada. Caso receba uma mensagem de erro, revise os passos anteriores.</p>\n\n  <h6>4. Instalando uma IDE (Ambiente de Desenvolvimento Integrado)</h6>\n  <p>Para programar com mais facilidade, é recomendável utilizar uma IDE. As mais populares são:</p>\n  <ul>\n    <li><strong>IntelliJ IDEA</strong> (versão Community é gratuita e poderosa)</li>\n    <li><strong>Eclipse</strong> (amplamente usado em ambientes corporativos)</li>\n    <li><strong>VS Code</strong> com extensão para Java (leve e versátil)</li>\n  </ul>\n  <p>Nesta trilha, usaremos o <strong>IntelliJ IDEA</strong> como padrão. Baixe e instale em <a href='https://www.jetbrains.com/idea/download/'>https://www.jetbrains.com/idea/download/</a>.</p>\n\n  <h6>5. Criando seu primeiro projeto Java na IDE</h6>\n  <ol>\n    <li>Abra o IntelliJ IDEA e clique em “New Project”.</li>\n    <li>Selecione “Java” e o JDK instalado.</li>\n    <li>Escolha um nome para o projeto, como <code>MeuPrimeiroProjeto</code>.</li>\n    <li>Crie um arquivo chamado <code>Main.java</code> com o seguinte conteúdo:</li>\n  </ol>\n  <pre><code>public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Olá, mundo Java!\");\n  }\n}</code></pre>\n  <p>Execute clicando no botão “Run” (ícone de ▶️) e veja o resultado no console.</p>\n\n  <h6>6. Executando via terminal (sem IDE)</h6>\n  <p>Você também pode programar em qualquer editor de texto (como Notepad++ ou VS Code) e compilar no terminal:</p>\n  <ul>\n    <li>Salve o arquivo como <code>Main.java</code>.</li>\n    <li>No terminal, navegue até a pasta do arquivo:</li>\n    <pre><code>cd Caminho/da/pasta</code></pre>\n    <li>Compile com:</li>\n    <pre><code>javac Main.java</code></pre>\n    <li>Execute com:</li>\n    <pre><code>java Main</code></pre>\n  </ul>\n  <p>Se tudo estiver correto, verá a mensagem <code>Olá, mundo Java!</code> no terminal.</p>\n\n  <h6>7. Problemas comuns e como resolver</h6>\n  <ul>\n    <li><strong>Erro: 'java' não é reconhecido como um comando interno</strong> → Verifique se o PATH está corretamente configurado.</li>\n    <li><strong>Erro: arquivo .class não encontrado</strong> → Certifique-se de que compilou o arquivo com <code>javac</code> antes de executar com <code>java</code>.</li>\n    <li><strong>Erro de permissão</strong> no Linux/macOS → Use <code>chmod +x</code> ou revise permissões do diretório.</li>\n  </ul>\n\n  <h6>Conclusão</h6>\n  <p>Configurar seu ambiente corretamente é o primeiro passo para o sucesso no desenvolvimento Java. Com o JDK instalado, uma IDE adequada e o terminal funcionando, você já está pronto para explorar os fundamentos da linguagem com mais profundidade. Pratique compilar e executar programas simples para reforçar esse aprendizado inicial.</p>\n</div>"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.1 – Introdução à Linguagem Java",
  "aula": "Aula 3 – Primeiro programa em Java",
  "objetivo": "Construir, compilar e executar um programa Java básico utilizando boas práticas e a estrutura mínima necessária da linguagem.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "<p>Chegou o momento de colocar a mão na massa e escrever nosso primeiro programa em Java. Até aqui, vimos o que é a linguagem, como ela funciona e como configurar o ambiente. Agora, vamos compreender a estrutura mínima de um programa Java, entender cada parte e compilar um exemplo real na prática.</p><h5>1. Estrutura básica de um programa em Java</h5><p>Todo programa em Java começa com uma <strong>classe</strong> e dentro dessa classe temos um método chamado <code>main</code>, que é o ponto de entrada da aplicação. O Java exige que tudo esteja dentro de uma classe, o que reflete seu paradigma orientado a objetos.</p><pre><code class=\"language-java\">public class MeuPrimeiroPrograma {\n    public static void main(String[] args) {\n        System.out.println(\"Olá, mundo!\");\n    }\n}</code></pre><p>Vamos entender esse código linha por linha:</p><ul><li><code>public class MeuPrimeiroPrograma</code>: Estamos declarando uma classe pública chamada <code>MeuPrimeiroPrograma</code>. O nome do arquivo deve ser exatamente o mesmo, com extensão <code>.java</code>.</li><li><code>public static void main(String[] args)</code>: Esse é o método principal. Ele é chamado automaticamente quando executamos o programa. Vamos decompor:</li><ul><li><code>public</code>: Visível a partir de qualquer outro local do código.</li><li><code>static</code>: Não depende da criação de um objeto para ser executado.</li><li><code>void</code>: Não retorna nada.</li><li><code>String[] args</code>: Permite receber argumentos via linha de comando.</li></ul><li><code>System.out.println(\"Olá, mundo!\");</code>: Imprime uma mensagem no console.</li></ul><h5>2. Criando o arquivo Java</h5><p>Você pode usar qualquer editor de texto (como VS Code, Notepad++ ou até o Bloco de Notas) para escrever seu código. Crie um novo arquivo e salve como <code>MeuPrimeiroPrograma.java</code>.</p><h5>3. Compilando com o terminal</h5><p>Abra o terminal ou prompt de comando, navegue até o diretório onde o arquivo foi salvo e execute:</p><pre><code>javac MeuPrimeiroPrograma.java</code></pre><p>Esse comando vai gerar um arquivo chamado <code>MeuPrimeiroPrograma.class</code>, que é o bytecode que a JVM pode executar.</p><h5>4. Executando o programa</h5><pre><code>java MeuPrimeiroPrograma</code></pre><p>Você verá no terminal:</p><pre><code>Olá, mundo!</code></pre><p>Isso significa que tudo funcionou corretamente!</p><h5>5. Possíveis erros e como evitá-los</h5><ul><li><strong>Erro: Cannot find symbol</strong>: Isso geralmente acontece quando há erros de digitação no nome da classe ou método.</li><li><strong>Erro: class MeuPrimeiroPrograma is public, should be declared in a file named MeuPrimeiroPrograma.java</strong>: Isso ocorre se o nome da classe não corresponder ao nome do arquivo.</li><li><strong>Erro de sintaxe</strong>: Falta de ponto e vírgula, chaves ou parênteses são muito comuns no início.</li></ul><h5>6. Boas práticas desde o início</h5><ul><li>Nomeie suas classes com a primeira letra maiúscula e use camel case (ex: <code>MinhaPrimeiraClasse</code>).</li><li>Comente seu código para documentar sua lógica.</li><li>Use identação correta para melhorar a leitura do código.</li><li>Evite nomes genéricos como <code>teste.java</code> ou <code>prog.java</code>.</li></ul><h5>7. Explorando variações simples</h5><p>Podemos experimentar pequenas mudanças para explorar a linguagem. Veja exemplos:</p><pre><code class=\"language-java\">public class OlaNome {\n    public static void main(String[] args) {\n        String nome = \"Ariel\";\n        System.out.println(\"Olá, \" + nome + \"!\");\n    }\n}</code></pre><p>Esse programa armazena um nome em uma variável e concatena na saída.</p><h5>8. Próximos passos</h5><p>Agora que entendemos como criar e executar um programa simples, estamos prontos para aprofundar nos elementos da linguagem. Nas próximas aulas, vamos explorar os tipos primitivos, variáveis, constantes e expressões que são a base para construir programas mais poderosos e dinâmicos.</p><p>Escrever seu primeiro programa é um marco importante. Ele não só te dá confiança como também estabelece os pilares para os próximos tópicos. Continue praticando, experimentando variações e se acostumando com a sintaxe do Java. Esse é o primeiro passo para se tornar um desenvolvedor Java de verdade!</p>"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.2 – Tipos e operações básicas",
  "aula": "Aula 4 – Tipos primitivos, variáveis e constantes",
  "objetivo": "Compreender o uso e as diferenças entre tipos primitivos, variáveis e constantes em Java, além de aplicar boas práticas na declaração e inicialização.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "<p>Todo programa precisa lidar com dados: números, textos, estados, condições. Para isso, usamos variáveis, constantes e tipos de dados. Nesta aula, vamos entender como o Java lida com esse universo e como declarar corretamente cada tipo.</p><h5>1. O que são tipos primitivos?</h5><p>Em Java, os tipos primitivos representam os valores mais simples que podem ser manipulados diretamente pela linguagem. Eles não são objetos, portanto não possuem métodos ou atributos, e são armazenados diretamente na memória.</p><p>Java possui <strong>8 tipos primitivos</strong>, divididos em categorias:</p><ul><li><strong>Inteiros:</strong> <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code></li><li><strong>Ponto flutuante:</strong> <code>float</code>, <code>double</code></li><li><strong>Caractere:</strong> <code>char</code></li><li><strong>Lógico:</strong> <code>boolean</code></li></ul><h5>2. Tabela de tipos primitivos</h5><table class='table table-bordered'><thead><tr><th>Tipo</th><th>Tamanho</th><th>Intervalo</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8 bits</td><td>-128 a 127</td></tr><tr><td><code>short</code></td><td>16 bits</td><td>-32.768 a 32.767</td></tr><tr><td><code>int</code></td><td>32 bits</td><td>-2³¹ a 2³¹-1</td></tr><tr><td><code>long</code></td><td>64 bits</td><td>-2⁶³ a 2⁶³-1</td></tr><tr><td><code>float</code></td><td>32 bits</td><td>Aproximadamente ±3.4e38</td></tr><tr><td><code>double</code></td><td>64 bits</td><td>Aproximadamente ±1.7e308</td></tr><tr><td><code>char</code></td><td>16 bits</td><td>'a', 'Z', '0', '@'</td></tr><tr><td><code>boolean</code></td><td>1 bit</td><td><code>true</code> ou <code>false</code></td></tr></tbody></table><h5>3. Variáveis: declaração e inicialização</h5><p>Uma <strong>variável</strong> é um espaço na memória reservado para armazenar um valor. Para declarar uma variável em Java, usamos a seguinte sintaxe:</p><pre><code class=\"language-java\">int idade;\nidade = 25;</code></pre><p>Ou podemos inicializar diretamente:</p><pre><code class=\"language-java\">int idade = 25;</code></pre><p>Outro exemplo com tipos diferentes:</p><pre><code class=\"language-java\">double salario = 3590.75;\nboolean ativo = true;\nchar letra = 'J';</code></pre><h5>4. Nomes de variáveis: boas práticas</h5><ul><li>Devem começar com letra, underscore (_) ou cifrão ($)</li><li>Não podem começar com número</li><li>Devem usar letras minúsculas e camelCase: <code>salarioMensal</code></li><li>Evite nomes genéricos como <code>x</code> ou <code>teste</code></li><li>Evite usar acentos ou caracteres especiais</li></ul><h5>5. Constantes: valores imutáveis</h5><p>Constantes são declaradas com a palavra-chave <code>final</code> e não podem ser alteradas após a inicialização. Por convenção, seus nomes são escritos em <strong>letras maiúsculas com underscore</strong>.</p><pre><code class=\"language-java\">final double PI = 3.14159;\nfinal int ANO_ATUAL = 2025;</code></pre><p>Uma tentativa de alterar esse valor gerará erro de compilação:</p><pre><code>PI = 3.14; // Erro!</code></pre><h5>6. Conversão implícita e explícita (casting)</h5><p>Java permite que valores sejam convertidos de um tipo para outro, com algumas regras:</p><ul><li><strong>Conversão implícita:</strong> quando o tipo destino comporta o tipo origem sem perda de dados.</li><li><strong>Conversão explícita (casting):</strong> quando há risco de perda de dados e o programador assume a responsabilidade.</li></ul><pre><code class=\"language-java\">int x = 10;\ndouble y = x; // conversão implícita</code></pre><pre><code class=\"language-java\">double a = 10.5;\nint b = (int) a; // conversão explícita (perde o .5)</code></pre><h5>7. Erros comuns</h5><ul><li><strong>Variável não inicializada:</strong> usar uma variável sem valor atribuído causa erro de compilação.</li><li><strong>Nome de variável duplicado:</strong> não é possível declarar duas variáveis com o mesmo nome no mesmo escopo.</li><li><strong>Tipos incompatíveis:</strong> tentar atribuir uma string em um inteiro, por exemplo.</li></ul><h5>8. Exercício ilustrativo</h5><p>Vamos criar um pequeno programa com múltiplos tipos e constantes:</p><pre><code class=\"language-java\">public class ExemploTipos {\n  public static void main(String[] args) {\n    final double PI = 3.14159;\n    int idade = 30;\n    float altura = 1.75f;\n    boolean estudante = true;\n    char inicial = 'A';\n\n    System.out.println(\"Idade: \" + idade);\n    System.out.println(\"Altura: \" + altura);\n    System.out.println(\"Estudante: \" + estudante);\n    System.out.println(\"Inicial do nome: \" + inicial);\n    System.out.println(\"Valor de PI: \" + PI);\n  }\n}</code></pre><p>Saída esperada:</p><pre><code>Idade: 30\nAltura: 1.75\nEstudante: true\nInicial do nome: A\nValor de PI: 3.14159</code></pre><h5>9. Conclusão</h5><p>Compreender os tipos primitivos, variáveis e constantes é essencial para a construção de programas robustos. Esses conceitos são a base sobre a qual toda a lógica será construída nas próximas aulas. Saber escolher o tipo correto economiza memória, evita erros e melhora a legibilidade do código.</p><p>Continue explorando e testando variações. Modifique os valores, tente fazer casting entre tipos, experimente nomes diferentes de variáveis e observe os comportamentos. Isso vai solidificar seu entendimento e torná-lo mais confiante no uso do Java.</p>"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.2 – Tipos e operações básicas",
  "aula": "Aula 5 – Operadores e expressões",
  "objetivo": "Compreender o funcionamento dos operadores em Java e como usá-los para construir expressões que realizam cálculos, comparações e operações lógicas no código.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Operadores e Expressões em Java</h5>\n  <p>Operadores são símbolos especiais usados para realizar operações em variáveis e valores. Eles são a base da lógica computacional, pois permitem que você crie expressões capazes de calcular, comparar ou manipular dados. Em Java, os operadores são classificados em diferentes categorias, cada uma com funcionalidades específicas.</p>\n\n  <h6>1. Operadores Aritméticos</h6>\n  <p>Esses operadores realizam operações matemáticas básicas:</p>\n  <ul>\n    <li><code>+</code> (adição)</li>\n    <li><code>-</code> (subtração)</li>\n    <li><code>*</code> (multiplicação)</li>\n    <li><code>/</code> (divisão)</li>\n    <li><code>%</code> (módulo ou resto da divisão)</li>\n  </ul>\n  <p><strong>Exemplo:</strong></p>\n  <pre><code>int a = 10, b = 3;\nSystem.out.println(a + b);  // 13\nSystem.out.println(a - b);  // 7\nSystem.out.println(a * b);  // 30\nSystem.out.println(a / b);  // 3\nSystem.out.println(a % b);  // 1</code></pre>\n  <p><strong>Importante:</strong> Em divisões com inteiros, o resultado é inteiro. Para obter números com casas decimais, use <code>double</code>:</p>\n  <pre><code>double x = 10.0, y = 3.0;\nSystem.out.println(x / y); // 3.333...</code></pre>\n\n  <h6>2. Operadores de Atribuição</h6>\n  <p>Esses operadores atribuem valores a variáveis:</p>\n  <ul>\n    <li><code>=</code> (atribuição simples)</li>\n    <li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> (atribuições compostas)</li>\n  </ul>\n  <pre><code>int valor = 5;\nvalor += 3; // valor agora é 8\nvalor *= 2; // valor agora é 16</code></pre>\n\n  <h6>3. Operadores Relacionais (ou de Comparação)</h6>\n  <p>Comparam valores e retornam <code>true</code> ou <code>false</code>:</p>\n  <ul>\n    <li><code>==</code> (igual a)</li>\n    <li><code>!=</code> (diferente de)</li>\n    <li><code>&gt;</code> (maior que)</li>\n    <li><code>&gt;=</code> (maior ou igual a)</li>\n    <li><code>&lt;</code> (menor que)</li>\n    <li><code>&lt;=</code> (menor ou igual a)</li>\n  </ul>\n  <pre><code>int idade = 18;\nSystem.out.println(idade == 18);  // true\nSystem.out.println(idade &gt; 21);   // false</code></pre>\n\n  <h6>4. Operadores Lógicos</h6>\n  <p>Usados para combinar expressões booleanas:</p>\n  <ul>\n    <li><code>&&</code> (E lógico – <em>and</em>)</li>\n    <li><code>||</code> (OU lógico – <em>or</em>)</li>\n    <li><code>!</code> (NÃO lógico – <em>not</em>)</li>\n  </ul>\n  <pre><code>boolean cond1 = true;\nboolean cond2 = false;\nSystem.out.println(cond1 && cond2); // false\nSystem.out.println(cond1 || cond2); // true\nSystem.out.println(!cond1);         // false</code></pre>\n\n  <h6>5. Operadores Unários</h6>\n  <p>Atuam sobre um único operando:</p>\n  <ul>\n    <li><code>+</code>, <code>-</code> (indicam sinal positivo ou negativo)</li>\n    <li><code>++</code> (incremento)</li>\n    <li><code>--</code> (decremento)</li>\n  </ul>\n  <pre><code>int x = 5;\nx++; // x agora é 6\n--x; // x volta a ser 5</code></pre>\n  <p><strong>Prefixo vs. Sufixo:</strong></p>\n  <pre><code>int y = 10;\nSystem.out.println(++y); // imprime 11\nSystem.out.println(y++); // imprime 11, mas depois y vira 12</code></pre>\n\n  <h6>6. Operadores Ternários</h6>\n  <p>É uma forma curta de escrever <code>if/else</code>:</p>\n  <pre><code>int idade = 20;\nString resultado = (idade &gt;= 18) ? \"Maior de idade\" : \"Menor de idade\";\nSystem.out.println(resultado);</code></pre>\n\n  <h6>7. Precedência de Operadores</h6>\n  <p>Assim como na matemática, há uma ordem de precedência. Por exemplo, multiplicações são feitas antes das adições. Parênteses podem alterar essa ordem:</p>\n  <pre><code>int resultado = 3 + 4 * 2;      // 3 + 8 = 11\nint resultado2 = (3 + 4) * 2;  // 7 * 2 = 14</code></pre>\n\n  <h6>Resumo</h6>\n  <ul>\n    <li>Use operadores aritméticos para cálculos.</li>\n    <li>Operadores relacionais comparam valores.</li>\n    <li>Operadores lógicos combinam condições.</li>\n    <li>Operadores unários manipulam o valor de uma variável.</li>\n    <li>O operador ternário simplifica decisões.</li>\n    <li>Precedência importa! Use parênteses para clareza.</li>\n  </ul>\n\n  <h6>Exercício de Fixação</h6>\n  <p>Crie um programa em Java que receba dois números e mostre:</p>\n  <ul>\n    <li>A soma, subtração, multiplicação e divisão entre eles.</li>\n    <li>Se o primeiro número é maior que o segundo.</li>\n    <li>Se ambos são iguais.</li>\n  </ul>\n</div>"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.2 – Tipos e operações básicas",
  "aula": "Aula 6 – Conversão de tipos (casting)",
  "objetivo": "Compreender os diferentes tipos de conversão de dados em Java, incluindo conversões implícitas e explícitas (casting), suas regras, implicações e boas práticas para evitar erros em tempo de compilação e execução.",
   "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Conversão de Tipos em Java (Casting)</h5>\n  <p>Em programação, frequentemente precisamos transformar valores de um tipo de dado para outro. Em Java, isso é conhecido como <strong>conversão de tipos</strong>, ou simplesmente <em>casting</em>. Essa operação é essencial em situações onde há diferentes tipos de dados interagindo no mesmo contexto, como ao realizar cálculos entre inteiros e números decimais, ou ao manipular dados de entrada do usuário.</p>\n\n  <h6>1. Conversão Implícita (Widening Casting)</h6>\n  <p>Java realiza automaticamente a conversão quando você vai de um tipo menor para um tipo maior, ou seja, do tipo com menor capacidade para um tipo com maior capacidade de armazenamento. Isso é chamado de <strong>widening</strong>.</p>\n  <p><strong>Exemplo:</strong></p>\n  <pre><code>int numInt = 100;\nlong numLong = numInt;  // conversão implícita\nfloat numFloat = numLong; // também implícita\nSystem.out.println(numFloat); // 100.0</code></pre>\n  <p>Essa conversão não gera perda de dados e é segura. Os tipos seguem esta hierarquia:</p>\n  <p><code>byte → short → int → long → float → double</code></p>\n\n  <h6>2. Conversão Explícita (Narrowing Casting)</h6>\n  <p>Quando a conversão é do tipo de maior capacidade para um de menor capacidade, é necessário indicar isso explicitamente. Essa operação é chamada de <strong>narrowing</strong> e pode resultar em perda de dados ou truncamento.</p>\n  <p><strong>Exemplo:</strong></p>\n  <pre><code>double numDouble = 9.99;\nint numInt = (int) numDouble;  // conversão explícita\nSystem.out.println(numInt);    // saída: 9</code></pre>\n  <p>Nesse caso, a parte decimal é descartada.</p>\n\n  <h6>3. Exemplo com tipos numéricos</h6>\n  <pre><code>float f = 123.456f;\nint i = (int) f;\nSystem.out.println(i); // 123</code></pre>\n  <p>Note que valores decimais são truncados, não arredondados!</p>\n\n  <h6>4. Problemas comuns com Narrowing Casting</h6>\n  <p>Se o valor for maior do que o tipo de destino pode armazenar, o resultado será inesperado. Isso é conhecido como <em>overflow</em> ou <em>underflow</em>.</p>\n  <pre><code>int grande = 130;\nbyte pequeno = (byte) grande;\nSystem.out.println(pequeno); // -126 (!)</code></pre>\n  <p>Isso acontece porque o <code>byte</code> vai de -128 a 127. O valor 130 extrapola esse limite.</p>\n\n  <h6>5. Conversão entre char e int</h6>\n  <p>Como <code>char</code> representa um caractere Unicode, podemos convertê-lo para <code>int</code> para saber o valor decimal do caractere.</p>\n  <pre><code>char letra = 'A';\nint codigo = letra;\nSystem.out.println(codigo); // 65</code></pre>\n\n  <h6>6. Conversão entre String e números</h6>\n  <p>Ao trabalhar com entrada do usuário ou arquivos, dados frequentemente vêm como <code>String</code>. Para usá-los como número, é necessário converter:</p>\n  <pre><code>String texto = \"42\";\nint numero = Integer.parseInt(texto);\ndouble decimal = Double.parseDouble(\"3.14\");</code></pre>\n  <p>Para converter de volta para <code>String</code>:</p>\n  <pre><code>int idade = 30;\nString idadeTexto = String.valueOf(idade);</code></pre>\n\n  <h6>7. Boas Práticas</h6>\n  <ul>\n    <li>Evite <em>narrowing casting</em> sempre que possível.</li>\n    <li>Sempre valide se os valores estão dentro dos limites do tipo alvo.</li>\n    <li>Use conversão com cuidado ao lidar com entrada de dados.</li>\n    <li>Use métodos como <code>parseInt</code>, <code>valueOf</code> e <code>toString()</code> para conversões seguras entre String e tipos primitivos.</li>\n  </ul>\n\n  <h6>8. Exercício Proposto</h6>\n  <p>Crie um programa que:</p>\n  <ul>\n    <li>Receba um número <code>double</code> e mostre ele truncado em <code>int</code>.</li>\n    <li>Converta um <code>char</code> para <code>int</code> e vice-versa.</li>\n    <li>Transforme uma <code>String</code> em <code>float</code> e realize uma multiplicação com outro número.</li>\n  </ul>\n</div>\n"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.3 – Entrada, saída e execução",
  "aula": "Entrada e saída de dados com Scanner",
  "objetivo": "Ensinar como capturar entradas do usuário em programas Java utilizando a classe Scanner, abordando os principais métodos e boas práticas.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "<h3>Entrada e Saída de Dados com Scanner</h3>\n\n<p>A entrada de dados é uma das funcionalidades mais básicas e essenciais em qualquer linguagem de programação. Ela permite que o usuário interaja com o programa e forneça informações que serão utilizadas no processamento. No Java, a principal forma de realizar a entrada de dados por meio do terminal é utilizando a classe <code>Scanner</code>, que faz parte do pacote <code>java.util</code>.</p>\n\n<h4>Importando a Classe Scanner</h4>\n<p>Antes de utilizar a classe Scanner, é necessário importá-la. Isso é feito com a seguinte linha no início do código:</p>\n<pre><code>import java.util.Scanner;\n</code></pre>\n\n<h4>Criando um Objeto Scanner</h4>\n<p>Para capturar dados do teclado, criamos um objeto Scanner apontando para o fluxo de entrada padrão do sistema (<code>System.in</code>):</p>\n<pre><code>Scanner entrada = new Scanner(System.in);\n</code></pre>\n\n<h4>Lendo Strings</h4>\n<pre><code>System.out.print(\"Digite seu nome: \");\nString nome = entrada.nextLine();\nSystem.out.println(\"Olá, \" + nome + \"!\");\n</code></pre>\n\n<h4>Lendo Números Inteiros</h4>\n<pre><code>System.out.print(\"Digite sua idade: \");\nint idade = entrada.nextInt();\nSystem.out.println(\"Você tem \" + idade + \" anos.\");\n</code></pre>\n\n<h4>Lendo Números Decimais</h4>\n<pre><code>System.out.print(\"Digite sua altura: \");\ndouble altura = entrada.nextDouble();\nSystem.out.println(\"Sua altura é \" + altura + \" metros.\");\n</code></pre>\n\n<h4>Outras Leituras</h4>\n<ul>\n  <li><code>nextBoolean()</code> — para ler valores booleanos (true/false)</li>\n  <li><code>nextFloat()</code> — para ponto flutuante de precisão simples</li>\n  <li><code>nextLong()</code> — para inteiros longos</li>\n  <li><code>nextByte()</code> e <code>nextShort()</code> — tipos específicos</li>\n</ul>\n\n<h4>Cuidados ao Misturar Tipos</h4>\n<p>Quando usamos <code>nextInt()</code> seguido de <code>nextLine()</code>, pode ocorrer o consumo indesejado de uma quebra de linha:</p>\n<pre><code>int idade = entrada.nextInt();\nentrada.nextLine(); // Consome o \n\nString nome = entrada.nextLine();\n</code></pre>\n\n<h4>Encerrando o Scanner</h4>\n<pre><code>entrada.close();\n</code></pre>\n<p>Fechar o Scanner também fecha o <code>System.in</code>, então use com cautela se precisar ler novamente depois.</p>\n\n<h4>Boas Práticas</h4>\n<ul>\n  <li>Use mensagens claras antes da leitura.</li>\n  <li>Trate exceções com <code>try-catch</code>.</li>\n  <li>Teste com diferentes entradas.</li>\n</ul>\n\n<h4>Exemplo Completo</h4>\n<pre><code>import java.util.Scanner;\n\npublic class EntradaDeDados {\n  public static void main(String[] args) {\n    Scanner entrada = new Scanner(System.in);\n\n    System.out.print(\"Digite seu nome: \");\n    String nome = entrada.nextLine();\n\n    System.out.print(\"Digite sua idade: \");\n    int idade = entrada.nextInt();\n\n    System.out.print(\"Digite sua altura (use ponto): \");\n    double altura = entrada.nextDouble();\n\n    System.out.println(\"Nome: \" + nome);\n    System.out.println(\"Idade: \" + idade);\n    System.out.println(\"Altura: \" + altura + \"m\");\n\n    entrada.close();\n  }\n}\n</code></pre>\n\n<h4>Conclusão</h4>\n<p>A classe Scanner oferece uma forma prática e flexível de capturar entradas do usuário em Java. Com ela, é possível criar programas interativos e dinâmicos. Dominar sua utilização é essencial para desenvolver aplicações que dependem de informações fornecidas em tempo de execução.</p>"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.3 – Entrada, saída e execução",
  "aula": "Compilação e execução via terminal e IDE",
  "objetivo": "Explicar como compilar e executar programas Java utilizando tanto o terminal quanto ambientes de desenvolvimento integrados (IDEs), destacando vantagens, desvantagens e boas práticas.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Conteúdo da Aula</h5>\n  <p>Dominar o processo de compilação e execução de programas Java é essencial para qualquer desenvolvedor. Nesta aula, exploraremos como trabalhar com Java a partir do terminal (linha de comando) e também utilizando IDEs como IntelliJ IDEA e Eclipse. A compreensão de ambos os métodos é importante tanto para fins educacionais quanto profissionais.</p>\n\n  <h6 class=\"mt-4\">Compilação e Execução via Terminal</h6>\n  <p>O terminal é uma interface poderosa que permite ao programador interagir diretamente com o sistema operacional. O compilador do Java, chamado <code>javac</code>, converte o código-fonte (arquivo <code>.java</code>) em bytecode (arquivo <code>.class</code>), que é interpretado pela JVM (Java Virtual Machine).</p>\n\n  <h6>Pré-requisitos</h6>\n  <p>Antes de tudo, você precisa ter o JDK (Java Development Kit) instalado em sua máquina e configurado na variável de ambiente <code>PATH</code>.</p>\n\n  <p>Para verificar se o Java está instalado corretamente:</p>\n  <pre><code>java -version\njavac -version</code></pre>\n\n  <h6>Compilando um Programa Java</h6>\n  <p>Vamos considerar o seguinte exemplo salvo no arquivo <code>OlaMundo.java</code>:</p>\n\n  <pre><code>public class OlaMundo {\n  public static void main(String[] args) {\n    System.out.println(\"Olá, mundo!\");\n  }\n}</code></pre>\n\n  <p>No terminal, vá até o diretório onde está o arquivo e digite:</p>\n  <pre><code>javac OlaMundo.java</code></pre>\n  <p>Isso criará um arquivo <code>OlaMundo.class</code>, que contém o bytecode.</p>\n\n  <h6>Executando o Programa</h6>\n  <p>Para rodar o programa:</p>\n  <pre><code>java OlaMundo</code></pre>\n  <p>Note que você não deve digitar a extensão <code>.class</code>.</p>\n\n  <h6>Erros Comuns</h6>\n  <ul>\n    <li>Esquecer de salvar o arquivo antes de compilar.</li>\n    <li>Nome do arquivo diferente do nome da classe pública.</li>\n    <li>Falta de ponto e vírgula.</li>\n  </ul>\n\n  <h6>Compilação Múltipla</h6>\n  <p>Se houver múltiplas classes, o comando pode ser:</p>\n  <pre><code>javac *.java</code></pre>\n\n  <h6 class=\"mt-4\">Execução em IDEs</h6>\n  <p>IDE (Integrated Development Environment) é um ambiente que oferece recursos como editor de código, compilador, debugger e terminal integrados. As IDEs mais populares para Java são IntelliJ IDEA, Eclipse e NetBeans.</p>\n\n  <h6>Usando o IntelliJ IDEA</h6>\n  <ol>\n    <li>Crie um novo projeto Java.</li>\n    <li>Adicione uma nova classe com <code>main()</code>.</li>\n    <li>Escreva o código e clique no botão verde de execução ao lado do <code>main</code>.</li>\n  </ol>\n\n  <h6>Usando o Eclipse</h6>\n  <ol>\n    <li>Crie um novo projeto Java no menu <em>File > New > Java Project</em>.</li>\n    <li>Crie uma nova classe: <em>New > Class</em>.</li>\n    <li>Marque a opção <code>public static void main</code> ao criar a classe.</li>\n    <li>Clique com o botão direito e selecione <code>Run As > Java Application</code>.</li>\n  </ol>\n\n  <h6>Vantagens do uso de IDE</h6>\n  <ul>\n    <li>Autocompletar (code completion)</li>\n    <li>Detecção automática de erros</li>\n    <li>Refatoração de código</li>\n    <li>Depuração visual com breakpoints</li>\n    <li>Integração com controle de versão (Git)</li>\n  </ul>\n\n  <h6>Vantagens do terminal</h6>\n  <ul>\n    <li>Mais controle e conhecimento técnico</li>\n    <li>Útil para scripts de automação</li>\n    <li>Leve e rápido</li>\n    <li>Compreensão mais clara do ciclo de compilação</li>\n  </ul>\n\n  <h6 class=\"mt-4\">Boas Práticas</h6>\n  <ul>\n    <li>Use IDEs para acelerar o desenvolvimento, mas conheça bem o terminal.</li>\n    <li>Organize seus arquivos em pacotes para projetos maiores.</li>\n    <li>Evite usar acentuação em nomes de arquivos e classes.</li>\n    <li>Use comentários no código para facilitar entendimento futuro.</li>\n  </ul>\n\n  <h6>Conclusão</h6>\n  <p>Aprender a compilar e executar programas Java via terminal é fundamental para entender o funcionamento da linguagem e da JVM. Já o uso de IDEs facilita o desenvolvimento profissional. Dominar ambas as abordagens torna o programador mais completo e preparado para diferentes contextos de trabalho.</p>\n</div>\n"
},
{
  "trilha": "Trilha 1 – Fundamentos do Java",
  "modulo": "Módulo 1.3 – Entrada, saída e execução",
  "aula": "Comentários, identação e boas práticas",
  "objetivo": "Compreender a importância dos comentários no código, aplicar identação correta e seguir boas práticas de programação em Java.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Comentários, Identação e Boas Práticas</h5>\n\n  <p>Ao escrever um código, não basta que ele funcione. É essencial que ele seja compreensível para outras pessoas — e para você mesmo no futuro. Para isso, três aspectos se tornam fundamentais: comentários, identação e boas práticas de programação. Nesta aula, vamos explorar cada um deles com profundidade.</p>\n\n  <h6>Comentários em Java</h6>\n  <p>Comentários são anotações inseridas no código que não são interpretadas pelo compilador. Eles servem para explicar trechos de código, indicar pontos de atenção ou registrar informações úteis ao leitor.</p>\n\n  <p><strong>Tipos de comentários:</strong></p>\n  <ul>\n    <li><code>// Comentário de linha única</code></li>\n    <li><code>/* Comentário de múltiplas linhas */</code></li>\n    <li><code>/** Comentário de documentação Javadoc */</code></li>\n  </ul>\n\n  <p><strong>Exemplo:</strong></p>\n  <pre><code>// Este é um comentário de linha única\n\n/* \n   Este é um comentário\n   de múltiplas linhas\n*/\n\npublic class Exemplo {\n  /** Método principal da aplicação */\n  public static void main(String[] args) {\n    System.out.println(\"Olá, mundo!\"); // Exibe mensagem no terminal\n  }\n}</code></pre>\n\n  <p>Evite exageros: comentar o óbvio pode poluir o código. Comente apenas o que realmente precisa ser explicado, como regras de negócio, decisões importantes ou uso incomum de estruturas.</p>\n\n  <h6>Identação e organização</h6>\n  <p>Identar significa organizar o código com recuos e alinhamentos apropriados. A identação correta:</p>\n  <ul>\n    <li>Facilita a leitura e a manutenção do código.</li>\n    <li>Ajuda a visualizar hierarquias de blocos, como loops, condicionais e métodos.</li>\n    <li>Evita confusão em estruturas complexas.</li>\n  </ul>\n\n  <p><strong>Exemplo com má identação:</strong></p>\n  <pre><code>public class Soma {\npublic static void main(String[] args){\nint a=5;\nint b=3;\nSystem.out.println(\"Resultado:\"+ (a+b));\n}\n}</code></pre>\n\n  <p><strong>Exemplo com boa identação:</strong></p>\n  <pre><code>public class Soma {\n  public static void main(String[] args) {\n    int a = 5;\n    int b = 3;\n    System.out.println(\"Resultado: \" + (a + b));\n  }\n}</code></pre>\n\n  <p>A maioria das IDEs como Eclipse, IntelliJ e VS Code possui atalhos para identar automaticamente. No Eclipse, por exemplo, o atalho <code>Ctrl + Shift + F</code> organiza todo o código.</p>\n\n  <h6>Boas práticas de programação</h6>\n  <p>Seguir boas práticas é fundamental para garantir que o código seja limpo, eficiente, fácil de manter e menos propenso a erros. Algumas práticas recomendadas em Java incluem:</p>\n\n  <ol>\n    <li><strong>Use nomes significativos:</strong> Variáveis, métodos e classes devem ter nomes descritivos. Evite nomes como <code>x</code>, <code>data</code> ou <code>temp</code> sem contexto.</li>\n    <li><strong>Evite códigos duplicados:</strong> Se perceber trechos repetidos, considere transformá-los em métodos reutilizáveis.</li>\n    <li><strong>Crie métodos curtos:</strong> Cada método deve fazer uma única tarefa. Se um método estiver muito longo, divida-o em partes menores.</li>\n    <li><strong>Utilize constantes para valores fixos:</strong> Isso evita \"números mágicos\" no código.</li>\n    <li><strong>Organize o projeto em pacotes:</strong> Separe responsabilidades em pacotes como <code>model</code>, <code>service</code>, <code>controller</code>.</li>\n    <li><strong>Trate exceções:</strong> Nunca ignore erros. Use blocos <code>try/catch</code> e mensagens úteis de erro.</li>\n  </ol>\n\n  <p><strong>Exemplo de código com boas práticas:</strong></p>\n  <pre><code>public class Calculadora {\n  public static void main(String[] args) {\n    int resultado = somar(10, 5);\n    System.out.println(\"Resultado da soma: \" + resultado);\n  }\n\n  public static int somar(int a, int b) {\n    return a + b;\n  }\n}</code></pre>\n\n  <h6>Padronização com convenções de código</h6>\n  <p>Java possui convenções amplamente aceitas pela comunidade, como:</p>\n  <ul>\n    <li><code>camelCase</code> para nomes de variáveis e métodos: <code>nomeCompleto</code>, <code>calcularMedia()</code></li>\n    <li><code>PascalCase</code> para nomes de classes: <code>Aluno</code>, <code>CalculadoraFinanceira</code></li>\n    <li>Constantes em <code>MAIÚSCULAS_SEPARADAS_POR_UNDERSCORE</code></li>\n  </ul>\n\n  <h6>Conclusão</h6>\n  <p>Comentários claros, identação consistente e boas práticas são elementos que distinguem um código amador de um código profissional. Esses hábitos tornam seus projetos mais sustentáveis, compreensíveis e fáceis de evoluir em equipe ou individualmente.</p>\n</div>\n"
},
{
  "trilha": "Trilha 2 – Controle de fluxo e estruturas de repetição",
  "modulo": "Módulo 2.1 – Estruturas Condicionais",
  "aula": "Aula 10 – Condicional if/else",
  "objetivo": "Aplicar estruturas condicionais simples e compostas com if e else na linguagem Java.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Condicional if/else</h5>\n\n  <p>A estrutura condicional <code>if/else</code> é um dos pilares da programação. Ela permite que o programa tome decisões com base em condições lógicas, executando diferentes blocos de código dependendo do resultado de uma expressão booleana (verdadeira ou falsa).</p>\n\n  <h6>1. Sintaxe Básica</h6>\n  <pre><code>if (condição) {\n  // bloco de código se a condição for verdadeira\n} else {\n  // bloco de código se a condição for falsa\n}</code></pre>\n\n  <p>O bloco <code>else</code> é opcional. Podemos usar apenas <code>if</code> se quisermos executar algo apenas quando a condição for verdadeira.</p>\n\n  <h6>2. Exemplo Simples</h6>\n  <pre><code>int idade = 18;\nif (idade >= 18) {\n  System.out.println(\"Você é maior de idade.\");\n} else {\n  System.out.println(\"Você é menor de idade.\");\n}</code></pre>\n\n  <p>Esse código imprime “Você é maior de idade.” se a variável <code>idade</code> for maior ou igual a 18. Caso contrário, imprime “Você é menor de idade.”</p>\n\n  <h6>3. Encadeamento com else if</h6>\n  <p>Quando há mais de duas possibilidades, usamos <code>else if</code> para testar múltiplas condições.</p>\n  <pre><code>int nota = 85;\n\nif (nota >= 90) {\n  System.out.println(\"Aprovado com excelência\");\n} else if (nota >= 70) {\n  System.out.println(\"Aprovado\");\n} else {\n  System.out.println(\"Reprovado\");\n}</code></pre>\n\n  <h6>4. Avaliação Booleana</h6>\n  <p>A condição no <code>if</code> deve ser uma expressão que resulte em um valor booleano (<code>true</code> ou <code>false</code>). Isso inclui:</p>\n  <ul>\n    <li>Comparações (<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>)</li>\n    <li>Operadores lógicos (<code>&&</code> - E, <code>||</code> - OU, <code>!</code> - NÃO)</li>\n  </ul>\n  <pre><code>int x = 5, y = 10;\n\nif (x < y && x > 0) {\n  System.out.println(\"x está entre 1 e y.\");\n}</code></pre>\n\n  <h6>5. Boas Práticas</h6>\n  <ul>\n    <li>Evite condicionais muito profundas (if dentro de if). Prefira <code>else if</code> ou estruturas como <code>switch</code> quando apropriado.</li>\n    <li>Use chaves <code>{}</code> mesmo para blocos de uma única linha, pois isso previne erros em manutenções futuras.</li>\n    <li>Se a lógica estiver muito complexa, extraia-a para métodos com nomes significativos.</li>\n  </ul>\n\n  <h6>6. Exemplo Completo</h6>\n  <pre><code>import java.util.Scanner;\n\npublic class VerificadorIdade {\n  public static void main(String[] args) {\n    Scanner entrada = new Scanner(System.in);\n\n    System.out.print(\"Digite sua idade: \");\n    int idade = entrada.nextInt();\n\n    if (idade >= 18) {\n      System.out.println(\"Você é maior de idade.\");\n    } else {\n      System.out.println(\"Você é menor de idade.\");\n    }\n\n    entrada.close();\n  }\n}</code></pre>\n\n  <h6>7. Erros Comuns</h6>\n  <ul>\n    <li>Esquecer as chaves e adicionar múltiplas instruções esperando que todas sejam condicionadas.</li>\n    <li>Utilizar <code>=</code> (atribuição) no lugar de <code>==</code> (comparação).</li>\n    <li>Não fechar corretamente as estruturas com chaves.</li>\n  </ul>\n\n  <h6>8. Exercício Proposto</h6>\n  <p>Crie um programa que leia um número inteiro e diga se ele é positivo, negativo ou zero.</p>\n\n  <h6>Conclusão</h6>\n  <p>Dominar estruturas condicionais é essencial para controlar o fluxo dos seus programas. Com o <code>if/else</code>, podemos adaptar a execução de acordo com as necessidades do usuário e criar lógica de negócios eficiente.</p>\n</div>\n"
},
{
  "trilha": "Trilha 2 – Controle de fluxo e estruturas de repetição",
  "modulo": "Módulo 2.1 – Estruturas Condicionais",
  "aula": "Aula 11 – Condicional switch/case",
  "objetivo": "Compreender o funcionamento da estrutura condicional switch/case, aplicando-a em decisões baseadas em múltiplos valores fixos.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Condicional switch/case</h5>\n\n  <p>A estrutura <code>switch/case</code> é utilizada para avaliar o valor de uma variável e executar diferentes blocos de código com base nesse valor. Ela é especialmente útil quando há múltiplas condições baseadas em igualdade — como escolher uma opção de menu, dias da semana, notas ou comandos numéricos. Essa estrutura torna o código mais limpo e legível do que uma sequência extensa de <code>if/else if</code>.</p>\n\n  <h6>1. Sintaxe Básica</h6>\n  <pre><code>switch (variável) {\n  case valor1:\n    // bloco de código\n    break;\n  case valor2:\n    // outro bloco\n    break;\n  ...\n  default:\n    // bloco se nenhum dos casos for atendido\n}</code></pre>\n\n  <p>A variável dentro do <code>switch</code> deve ser de um tipo compatível, como <code>int</code>, <code>char</code>, <code>String</code> ou <code>enum</code>. Cada <code>case</code> representa uma possibilidade, e o <code>default</code> é opcional, usado como um \"caso padrão\".</p>\n\n  <h6>2. Exemplo com Números</h6>\n  <pre><code>int dia = 3;\nswitch (dia) {\n  case 1:\n    System.out.println(\"Domingo\");\n    break;\n  case 2:\n    System.out.println(\"Segunda-feira\");\n    break;\n  case 3:\n    System.out.println(\"Terça-feira\");\n    break;\n  default:\n    System.out.println(\"Dia inválido\");\n}</code></pre>\n\n  <p>Se a variável <code>dia</code> tiver o valor 3, será impresso \"Terça-feira\". O uso do <code>break</code> evita que os blocos seguintes sejam executados. Sem ele, o código continua executando os próximos casos até o fim ou até encontrar um <code>break</code>.</p>\n\n  <h6>3. Exemplo com String</h6>\n  <pre><code>String comando = \"iniciar\";\n\nswitch (comando) {\n  case \"iniciar\":\n    System.out.println(\"Inicializando...\");\n    break;\n  case \"parar\":\n    System.out.println(\"Parando sistema.\");\n    break;\n  default:\n    System.out.println(\"Comando desconhecido.\");\n}</code></pre>\n\n  <p>Desde o Java 7, o <code>switch</code> passou a aceitar <code>String</code> como tipo válido para os casos.</p>\n\n  <h6>4. Omissão de break: fall-through</h6>\n  <p>Quando o <code>break</code> é omitido, o programa continua executando os próximos blocos (<strong>fall-through</strong>).</p>\n  <pre><code>int nivel = 2;\nswitch (nivel) {\n  case 1:\n    System.out.println(\"Nível 1\");\n  case 2:\n    System.out.println(\"Nível 2\");\n  case 3:\n    System.out.println(\"Nível 3\");\n}</code></pre>\n\n  <p>Com <code>nivel = 2</code>, serão impressas as mensagens dos casos 2 e 3. Esse comportamento pode ser útil em situações específicas, mas deve ser usado com cautela.</p>\n\n  <h6>5. Agrupamento de casos</h6>\n  <p>Também é possível agrupar <code>cases</code> para executar o mesmo bloco de código:</p>\n  <pre><code>char letra = 'a';\n\nswitch (letra) {\n  case 'a':\n  case 'e':\n  case 'i':\n  case 'o':\n  case 'u':\n    System.out.println(\"É uma vogal.\");\n    break;\n  default:\n    System.out.println(\"Não é vogal.\");\n}</code></pre>\n\n  <p>Nesse exemplo, se a letra for uma vogal minúscula, a mensagem apropriada será exibida.</p>\n\n  <h6>6. Comparando switch e if/else</h6>\n  <p>O <code>switch</code> é mais eficiente e limpo quando você precisa verificar igualdade contra valores fixos. Já o <code>if</code> permite expressões booleanas mais complexas, como maior que, menor que, combinações lógicas, etc.</p>\n\n  <h6>7. Erros Comuns</h6>\n  <ul>\n    <li>Esquecer o <code>break</code>, o que pode causar comportamento inesperado.</li>\n    <li>Usar tipos não suportados pelo <code>switch</code> (como <code>double</code> ou <code>boolean</code>).</li>\n    <li>Confundir os blocos do <code>default</code> como obrigatórios.</li>\n  </ul>\n\n  <h6>8. Exemplo Completo</h6>\n  <pre><code>import java.util.Scanner;\n\npublic class MenuPrincipal {\n  public static void main(String[] args) {\n    Scanner entrada = new Scanner(System.in);\n\n    System.out.println(\"1 - Iniciar\");\n    System.out.println(\"2 - Parar\");\n    System.out.println(\"3 - Sair\");\n    System.out.print(\"Escolha uma opção: \");\n    int opcao = entrada.nextInt();\n\n    switch (opcao) {\n      case 1:\n        System.out.println(\"Sistema iniciado!\");\n        break;\n      case 2:\n        System.out.println(\"Sistema parado!\");\n        break;\n      case 3:\n        System.out.println(\"Encerrando...\");\n        break;\n      default:\n        System.out.println(\"Opção inválida.\");\n    }\n\n    entrada.close();\n  }\n}</code></pre>\n\n  <h6>Conclusão</h6>\n  <p>O uso do <code>switch</code> proporciona uma maneira organizada e eficiente de lidar com múltiplas condições baseadas em igualdade. Saber quando usar <code>switch</code> ou <code>if</code> é uma habilidade essencial para tornar seu código mais limpo e profissional.</p>\n</div>\n"
},
{
  "trilha": "Trilha 2 – Controle de fluxo e estruturas de repetição",
  "modulo": "Módulo 2.1 – Estruturas Condicionais",
  "aula": "Aula 12 – Aninhamento de condições",
  "objetivo": "Utilizar estruturas condicionais aninhadas para implementar lógicas complexas de decisão em programas Java.",
  "video": "https://www.youtube.com/embed/ID_DO_VIDEO",
  "conteudo": "\n<div class=\"content-area p-4 border rounded\">\n  <h5 class=\"mb-3\">Aninhamento de Condições</h5>\n\n  <p>À medida que programas se tornam mais complexos, surge a necessidade de realizar verificações múltiplas dentro de uma mesma estrutura de decisão. O aninhamento de condições — também chamado de estruturas condicionais aninhadas — é uma técnica em que colocamos uma estrutura <code>if</code> dentro de outra. Isso permite criar decisões mais detalhadas e específicas com base em múltiplas variáveis ou etapas de validação.</p>\n\n  <h6>1. Sintaxe Básica</h6>\n  <pre><code>if (condicao1) {\n  if (condicao2) {\n    // Ação quando ambas as condições forem verdadeiras\n  } else {\n    // Ação quando condicao1 for verdadeira e condicao2 for falsa\n  }\n} else {\n  // Ação quando condicao1 for falsa\n}</code></pre>\n\n  <p>Nesse modelo, o segundo <code>if</code> só será avaliado se a <code>condicao1</code> for verdadeira. Caso contrário, a execução seguirá para o bloco <code>else</code> externo.</p>\n\n  <h6>2. Exemplo Prático</h6>\n  <pre><code>int idade = 20;\nboolean temCNH = true;\n\nif (idade >= 18) {\n  if (temCNH) {\n    System.out.println(\"Pode dirigir.\");\n  } else {\n    System.out.println(\"É maior de idade, mas não tem CNH.\");\n  }\n} else {\n  System.out.println(\"Não pode dirigir.\");\n}</code></pre>\n\n  <p>Esse código avalia primeiro se a pessoa é maior de idade. Caso seja, ele então verifica se a pessoa possui CNH. Somente se ambas as condições forem satisfeitas a mensagem “Pode dirigir” será exibida.</p>\n\n  <h6>3. Aninhamento com else if</h6>\n  <p>Além do <code>if</code> dentro de <code>if</code>, podemos usar <code>else if</code> dentro de blocos condicionais para cobrir múltiplos cenários.</p>\n  <pre><code>int nota = 85;\n\nif (nota >= 0 && nota <= 100) {\n  if (nota >= 90) {\n    System.out.println(\"Excelente\");\n  } else if (nota >= 70) {\n    System.out.println(\"Bom\");\n  } else {\n    System.out.println(\"Precisa melhorar\");\n  }\n} else {\n  System.out.println(\"Nota inválida\");\n}</code></pre>\n\n  <p>Nesse exemplo, o primeiro <code>if</code> verifica se a nota está em uma faixa válida. Dentro dele, fazemos outras avaliações com <code>else if</code> para classificar o desempenho.</p>\n\n  <h6>4. Boas Práticas</h6>\n  <ul>\n    <li>Evite aninhamentos muito profundos, que tornam o código difícil de entender.</li>\n    <li>Prefira dividir a lógica em métodos separados quando a quantidade de blocos <code>if</code> aninhados for alta.</li>\n    <li>Use variáveis auxiliares com nomes descritivos para guardar resultados intermediários, tornando o código mais legível.</li>\n  </ul>\n\n  <h6>5. Exemplo com mais níveis de decisão</h6>\n  <pre><code>int idade = 22;\nboolean temCNH = true;\nboolean alcoolizado = false;\n\nif (idade >= 18) {\n  if (temCNH) {\n    if (!alcoolizado) {\n      System.out.println(\"Pode dirigir.\");\n    } else {\n      System.out.println(\"Não pode dirigir: está alcoolizado.\");\n    }\n  } else {\n    System.out.println(\"Não tem CNH.\");\n  }\n} else {\n  System.out.println(\"Menor de idade.\");\n}</code></pre>\n\n  <p>Aqui, além da idade e CNH, estamos avaliando se a pessoa está alcoolizada. Esse tipo de lógica é comum em sistemas que precisam validar múltiplas condições para liberar ou bloquear ações.</p>\n\n  <h6>6. Erros comuns</h6>\n  <ul>\n    <li>Esquecer chaves ao aninhar blocos, o que pode levar a erros de lógica.</li>\n    <li>Não identificar corretamente onde cada <code>else</code> está associado, o que pode gerar confusão e comportamento inesperado.</li>\n  </ul>\n\n  <h6>7. Exercício Proposto</h6>\n  <p>Crie um programa que peça o nome de um aluno, sua média final e se ele entregou todos os trabalhos. O programa deve exibir:</p>\n  <ul>\n    <li>“Aprovado com distinção” – se a média for acima de 90 e todos os trabalhos foram entregues</li>\n    <li>“Aprovado” – se a média for entre 70 e 89, mesmo que não tenha entregado todos os trabalhos</li>\n    <li>“Reprovado” – para os demais casos</li>\n  </ul>\n\n  <h6>Conclusão</h6>\n  <p>O aninhamento de condições é uma ferramenta poderosa para desenvolver lógicas detalhadas. Ao ser usado com cuidado, torna o código mais expressivo e adaptado a diferentes cenários. Porém, sempre que possível, procure alternativas mais simples e legíveis — seja com <code>else if</code>, métodos auxiliares ou estruturas como <code>switch</code>.</p>\n</div>\n"
}




]